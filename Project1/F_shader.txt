#version 330 core
out vec4 FragColor;
in vec2 TexCoord;
in vec3 FragPos;
in vec3 Normal;


uniform vec3 viewPos;
uniform vec3 LightPos;
uniform sampler2D texture;
uniform vec3 LightColor;

void main()
{
    float ambient = 0.15;

    vec3 LightDir = normalize(LightPos - FragPos);  
    vec3 ViewDir = normalize(viewPos - FragPos);
    vec3 HalfwayDir = normalize(LightDir + ViewDir);

    vec3 Norm = normalize(Normal);

    float diff = max(dot(Norm, LightDir), 0.0);
   
    float specular = 0.5;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-LightDir, Norm);  
    specular *= pow(max(dot(viewDir, HalfwayDir), 0.0), 32.0);
    vec3 result = (specular + diff + ambient) * LightColor;

    FragColor = texture(texture, TexCoord);
    FragColor.x *= result.x;
    FragColor.y *= result.y;
    FragColor.z *= result.z;

};